name: "Auto ACR build push"
run-name: "Build tag [${{ github.event.inputs.tag }}]"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name to build and release (e.g., v1.0.0)"
        required: true

permissions:
  contents: write
  actions: read  # cần để gọi API lấy danh sách jobs/steps

jobs:
  create_release:
    name: Create tag & GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.gh_release.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create tag if not exists
        env:
          TAG_NAME: ${{ github.event.inputs.tag }}
        run: |
          if git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null; then
            echo "Tag $TAG_NAME already exists. Skipping."
          else
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create GitHub Release
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }}
          body: |
            This is an automated release for tag ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===== Fan-out 2 chiều: (worker ∈ {a,b,c}) x (sub ∈ {1,2,3}) -> 9 job chạy song song =====
  unit:
    name: Worker - ${{ matrix.worker }} / sub-${{ matrix.sub }}
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        worker: [a, b, c]
        sub: [1, 2, 3]

    env:
      JOB_DISPLAY_NAME: "Worker - ${{ matrix.worker }} / sub-${{ matrix.sub }}"

    steps:
      - uses: actions/checkout@v4

      # 3 bước trong mỗi job con; bước cuối mới notify
      - name: job 1
        run: |
          echo "[$(date)] do job 1 for ${{ matrix.worker }} / sub-${{ matrix.sub }}"
          sleep $((RANDOM % 3 + 2))

      - name: job 2
        run: |
          echo "[$(date)] do job 2 for ${{ matrix.worker }} / sub-${{ matrix.sub }}"
          sleep $((RANDOM % 3 + 2))

      - name: job 3
        run: |
          echo "[$(date)] do job 3 for ${{ matrix.worker }} / sub-${{ matrix.sub }}"
          sleep $((RANDOM % 3 + 2))

      # Tính URL log của CHÍNH job con này, trỏ thẳng vào step "job 1"
      - name: Compute job log URL (to 'job 1')
        id: job_url
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          RUN_ID="${GITHUB_RUN_ID}"
          ATTEMPT="${GITHUB_RUN_ATTEMPT}"
          API="${GITHUB_API_URL:-https://api.github.com}"

          # Lấy danh sách jobs của run attempt hiện tại
          RESP="$(curl -sSfL \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${API}/repos/${OWNER}/${REPO}/actions/runs/${RUN_ID}/attempts/${ATTEMPT}/jobs?per_page=100")"

          # Chọn đúng job theo DISPLAY NAME để tránh lẫn các job song song khác
          URL="$(jq -r '
            .jobs
            | map(select(.name == env.JOB_DISPLAY_NAME))        # job đúng của mình
            | .[0] as $job
            | if $job == null then empty else
                ($job.steps // []) as $steps
                | ( [range(0; $steps|length)
                     | select( ($steps[.]|.name//""|ascii_downcase) == "job 1" )
                   ] | .[0] ) as $idx
                | if $idx == null then $job.html_url
                  else "\($job.html_url)#step:\($idx+1):1"
                  end
              end
          ' <<<"$RESP")"

          if [ -z "${URL}" ] || [ "${URL}" = "null" ]; then
            # Fallback: dùng GITHUB_JOB_URL nếu action notify của bạn có sẵn biến này
            URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          fi

          echo "job_log_url=${URL}" >> "$GITHUB_OUTPUT"
          echo "Computed job_log_url: ${URL}"

      # Notify cuối cùng (dù pass/fail đều gửi)
      - name: Notify to Lark (per sub-job)
        if: always()
        uses: phuoc-le/action-lark-notify@main
        with:
          columnsPerRow: 2
          token: ${{ secrets.GITHUB_TOKEN }}
          # chạy JS trước khi render để set env động
          scriptInline: |
            const repo = envs.GITHUB_REPOSITORY;
            const base = envs.GITHUB_SERVER_URL || 'https://github.com';
            console.log(base);
            console.log(repo);
            const tag  = (github?.event?.inputs?.tag) || 'latest';
            setEnv('RELEASE_URL', `${base}/${repo}/releases/tag/${tag}`);

            console.log("hello anh em");
      
            // Nếu bạn muốn đổi title/subtitle từ script:
            setEnv('LARK_MESSAGE_TITLE', `Worker ${matrix.worker} / sub-${matrix.sub} finished`);
            setEnv('LARK_MESSAGE_SUBTITLE', `Status: ${job.status}`);
      
            // Nếu bạn cần log URL mà chưa có sẵn:
            setEnv('RUN_LOG_URL', `${base}/${repo}/actions/runs/${envs.GITHUB_RUN_ID}`);
          cardItems: |
            **Worker/Sub**<br>{{ matrix.worker }} / sub-{{ matrix.sub }}
            **Status**<br>{{ job.status }}
            **Repo**<br>[{{ TESTNE || GITHUB_REPOSITORY }}]({{ GITHUB_SERVER_URL }}/{{ GITHUB_REPOSITORY }})
            **Event**<br>{{ GITHUB_EVENT_NAME }}
            **Actor**<br>{{ GITHUB_ACTOR }}
            # dùng steps qua engine của mình (cần STEPS_JSON ở env, xem bên dưới)
            **Run Logs**<br>[Open logs]({{ steps.job_url.outputs.job_log_url || envs.RUN_LOG_URL }})
            **Ref**<br>[{{ GITHUB_REF }}]({{ GITHUB_SERVER_URL }}/{{ GITHUB_REPOSITORY }}/tree/{{ GITHUB_REF_NAME }})
            **Tag**<br>${{ github.event.inputs.tag }}
            **Release**<br>{{ envs.GITHUB_REPOSITORY }} {{RELEASE_URL}}
            **GITHUB_REPOSITORY**<br>{{ envs.GITHUB_REPOSITORY }} 
            **Hello**{{GITHUB_TAG_VERSION}}
        env:
          # webhook theo cách bạn đang dùng
          LARK_WEBHOOK: ${{ secrets.LARK_WEBHOOK }}
          # Bạn vẫn có thể set title/subtitle tĩnh ở đây (scriptInline có thể override)
          LARK_MESSAGE_TITLE: "Worker ${{ matrix.worker }} / sub-${{ matrix.sub }} finished"
          LARK_MESSAGE_SUBTITLE: |
            Status: ${{ job.status }}
      
          # TRUYỀN ĐỦ CONTEXT DƯỚI DẠNG JSON CHO ENGINE:
          VARS_JSON:   ${{ toJson(vars) }}
          GITHUB_JSON: ${{ toJson(github) }}
          MATRIX_JSON: ${{ toJson(matrix) }}
          JOB_JSON:    ${{ toJson(job) }}
          STEPS_JSON:  ${{ toJson(steps) }}
          ENVS_JSON:  ${{ toJson(env) }}











