name: "Auto ACR build push"
run-name: "Build tag [${{ github.event.inputs.tag }}]"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name to build and release (e.g., v1.0.0)"
        required: true

permissions:
  contents: write
  actions: read  # cần quyền đọc Actions API để lấy jobs/steps

jobs:
  create_release:
    name: Create tag & GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.gh_release.outputs.url }}
      release_id: ${{ steps.gh_release.outputs.id }}
      upload_url: ${{ steps.gh_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create tag if not exists
        env:
          TAG_NAME: ${{ github.event.inputs.tag }}
        run: |
          if git rev-parse -q --verify "refs/tags/$TAG_NAME" >/dev/null; then
            echo "Tag $TAG_NAME already exists. Skipping."
          else
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create GitHub Release
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: Release ${{ github.event.inputs.tag }}
          body: |
            This is an automated release for tag ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  workers:
    name: Worker - ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        name: [job-a, job-b, job-c]
    steps:
      - uses: actions/checkout@v4

      # --- 3 bước trong mỗi job song song ---
      - name: job 1 - Build
        run: |
          echo "[$(date)] building ${{ matrix.name }}..."
          sleep $((RANDOM % 5 + 3))

      - name: job 2 - Test
        run: |
          echo "[$(date)] testing ${{ matrix.name }}..."
          sleep $((RANDOM % 5 + 3))

      - name: job 3 - Publish
        run: |
          echo "[$(date)] publishing ${{ matrix.name }}..."
          sleep $((RANDOM % 5 + 3))

      # --- Tính URL log trỏ thẳng tới 'job 1' ---
      - name: Compute job log URL (to 'job 1')
        id: job_url
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          RUN_ID="${GITHUB_RUN_ID}"
          ATTEMPT="${GITHUB_RUN_ATTEMPT}"
          API="${GITHUB_API_URL:-https://api.github.com}"

          RESP="$(curl -sSfL \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${API}/repos/${OWNER}/${REPO}/actions/runs/${RUN_ID}/attempts/${ATTEMPT}/jobs?per_page=100")"

          URL="$(jq -r --arg RUNNER_NAME "$RUNNER_NAME" '
            def ts: ( .completed_at // .started_at // "" );
            def pick($arr):
              if ($arr|length)>0 then
                ( [ .[] | select(.conclusion=="failure") ] | sort_by(ts) | last )
                // ( [ .[] | select(.status=="in_progress") ] | sort_by(ts) | last )
                // ( $arr | sort_by(ts) | last )
              else null end;

            .jobs as $all
            | ( [ $all[] | select(.runner_name == $RUNNER_NAME) ] ) as $same
            | ( pick($same) // pick($all) ) as $job
            | if $job == null then empty else
                ($job.steps // []) as $steps
                | (
                    # 1) tìm đúng step tên "job 1"
                    ( [ range(0; $steps|length)
                        | select( ($steps[.]|.name//""|ascii_downcase) == "job 1" )
                      ] | .[0] )
                    # 2) fallback: bước hợp lệ đầu tiên (bỏ qua auto & Post ...)
                    // ( [ range(0; $steps|length)
                          | select( (($steps[.]|.name//"") as $n
                                    | ($n!="Set up job")
                                    and ($n!="Complete job")
                                    and (( $n|ascii_downcase | startswith("post ") )|not)
                                    )
                                )
                      ] | .[0] )
                  ) as $idx
                | if $idx == null then $job.html_url
                  else "\($job.html_url)#step:\($idx+1):1"
                  end
              end
          ' <<<"$RESP")"

          echo "job_log_url=$URL" >> "$GITHUB_OUTPUT"
          echo "Computed job_log_url: $URL"

      # --- Push notify cuối cùng của job ---
      - name: Notify to Lark (per job)
        if: always()
        uses: phuoc-le/action-lark-notify@hcphi/fix-get-logs
        with:
          columnsPerRow: 2
          token: ${{ secrets.GITHUB_TOKEN }}
          cardItems: |
            **Job**<br>${{ matrix.name }}
            **Status**<br>${{ job.status }}
            **Repo**<br>[{{GITHUB_REPOSITORY}}]({{GITHUB_SERVER_URL}}/{{GITHUB_REPOSITORY}})
            **Event**<br>{{GITHUB_EVENT_NAME}}
            **Actor**<br>{{GITHUB_ACTOR}}
            **Ref**<br>[{{GITHUB_REF}}]({{GITHUB_SERVER_URL}}/{{GITHUB_REPOSITORY}}/tree/{{GITHUB_REF_NAME}})
            **Run Logs**<br>[Open logs](${{ steps.job_url.outputs.job_log_url }})
            **Tag**<br>${{ github.event.inputs.tag }}
            **Release**<br>{{RELEASE_URL}}
        env:
          LARK_WEBHOOK: ${{ secrets.LARK_WEBHOOK }}
          LARK_MESSAGE_TITLE: "${{ matrix.name }} finished"
          LARK_MESSAGE_SUBTITLE: |
            Status: ${{ job.status }}
          RELEASE_URL: ${{ needs.create_release.outputs.release_url }}
